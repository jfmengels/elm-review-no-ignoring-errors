[{"name":"NoIgnoringErrors","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports when error details are not being used.\n\n    config =\n        [ NoIgnoringErrors.rule\n        ]\n\n\n## Fail\n\n    notificationMessage =\n        case foo of\n            Ok () ->\n                \"Success!\"\n\n            Err _ ->\n                \"Failure!\"\n\n\n## Success\n\n    notificationMessage =\n        case foo of\n            Ok () ->\n                \"Success!\"\n\n            Err errorMessage ->\n                \"Failed to make this work because \" ++ errorMessage\n\nAs shown in the following example, the rule will only check whether a wildcard (`_`) is used for `Err`. I recommend enabling the\n[`NoUnused.Patterns`](https://package.elm-lang.org/packages/jfmengels/elm-review-unused/latest/NoUnused-Patterns) rule\nto help get you to the state where the noise is removed.\n\n    notificationMessage =\n        case foo of\n            Ok () ->\n                \"Success!\"\n\n            Err errorMessage ->\n                -- `errorMessage` is not used, but the rule only checks whether a wildcard is being used.\n                \"Failure!\"\n\n\n## When (not) to enable this rule\n\nThis rule is still experimental. I am trying to figure out if this error is always useful or how to tweak it to remove\nfalse positives and discover more cases where errors are ignored.\n\nI would recommend at this point to run this rule to find places to improve but not to add it to your configuration.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-no-ignoring-errors/example --rules NoIgnoringErrors\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]}]